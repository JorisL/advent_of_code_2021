* 9.1

#+begin_src emacs-lisp
  (defun my-nth (n l)
    "same as nth, but also return nil when n<0"
    (if (>= n 0)
        (nth n l)
      nil))

  (defun my-nth-2d (x y grid) (my-nth x (my-nth y grid)))


  (defun get-neighbors (x y grid)
    (--filter it (list (my-nth-2d (1- x) y grid)
                       (my-nth-2d (1+ x) y grid)
                       (my-nth-2d x (1- y) grid)
                       (my-nth-2d x (1+ y) grid))))


  (let ((grid '((4 5 6 7 8 9 4 3 0 1 2 9 9 9 2 1 2 9 8 7 8 9 6 5 4 3 4 5 6 8 9 4 3 9 8 4 3 2 9 5 4 3 6 7 8 9 5 4 3 2 9 8 7 6 5 4 3 2 3 4 5 6 7 8 9 8 6 7 8 9 7 5 6 9 0 1 2 3 9 9 9 8 7 6 5 6 3 4 5 6 7 8 9 5 9 8 6 5 5 5)
                (3 4 5 8 9 6 3 2 1 2 9 8 9 8 9 0 9 8 9 6 7 8 9 4 3 2 3 4 6 7 8 9 9 8 7 6 4 9 8 9 9 4 5 6 7 8 9 3 2 1 9 8 7 6 4 3 2 1 4 5 6 7 9 9 2 1 5 6 7 8 9 4 9 8 9 2 3 9 8 9 9 9 8 5 4 5 2 5 6 5 8 9 3 4 8 9 5 4 3 4)
                (2 3 4 8 9 5 4 3 2 9 8 7 6 7 9 9 8 7 6 5 6 7 8 9 9 1 9 5 7 8 9 4 6 9 9 9 9 7 6 7 8 9 6 9 8 9 9 4 9 0 1 9 9 6 5 4 3 2 5 6 7 8 9 7 4 3 4 5 6 9 9 9 8 7 8 9 9 8 7 8 9 8 7 4 3 2 1 2 3 4 5 6 9 5 6 7 9 4 2 3)
                (1 2 3 7 8 9 5 4 9 8 7 6 5 6 9 8 7 6 5 4 7 9 9 9 8 9 8 9 8 9 0 3 5 9 8 7 8 9 5 6 7 8 9 9 9 9 8 9 8 9 2 9 8 7 6 5 4 5 6 7 8 9 9 6 5 4 5 6 9 8 9 8 7 6 7 8 9 7 6 9 8 7 6 5 4 5 6 3 4 5 6 7 8 9 7 9 8 9 1 2)
                (3 4 5 6 7 9 7 9 8 7 8 5 4 5 6 9 9 5 4 3 9 8 9 8 7 6 7 8 9 2 1 2 9 8 7 6 6 5 4 5 6 7 8 9 9 8 7 7 7 8 9 9 9 8 7 7 6 6 7 8 9 9 8 7 6 5 6 9 8 7 6 7 6 5 6 9 8 9 5 4 9 8 7 6 5 6 7 6 5 6 7 8 9 9 9 8 7 8 9 3)
                (4 5 6 7 9 8 9 8 9 6 5 4 3 4 9 8 7 6 5 9 8 7 8 7 6 5 6 7 8 9 2 9 8 7 6 5 5 4 3 4 5 6 7 8 9 7 6 5 6 7 9 8 7 9 9 8 9 7 8 9 4 5 9 8 7 6 7 8 9 9 5 6 5 4 5 8 7 8 9 3 2 9 8 7 6 7 8 7 6 7 8 9 9 9 8 7 6 7 8 9)
                (5 6 7 9 8 7 8 7 8 9 4 3 2 5 7 9 8 7 9 8 7 6 7 4 3 4 5 8 9 8 9 8 7 6 5 4 2 1 2 3 4 5 6 9 9 6 5 4 5 9 8 7 6 7 8 9 9 8 9 2 3 4 5 9 8 7 8 9 9 8 4 3 3 3 4 7 6 7 8 9 1 0 9 8 7 8 9 8 7 8 9 9 9 8 8 6 5 6 7 8)
                (8 7 9 8 7 6 5 6 7 8 9 2 1 4 5 6 9 8 9 8 6 5 4 3 2 3 6 5 6 7 8 9 8 7 6 7 8 0 1 2 3 4 5 9 8 9 4 3 9 8 7 8 5 6 9 8 9 9 0 1 2 3 9 8 9 8 9 9 8 7 3 2 1 2 3 4 5 6 7 8 9 9 9 9 8 9 4 9 8 9 8 9 8 7 6 5 4 5 6 8)
                (9 9 8 7 6 5 4 6 8 8 9 3 2 3 6 8 9 9 8 7 6 5 4 2 1 2 3 4 5 6 7 8 9 8 6 3 2 1 2 5 4 9 9 8 7 8 9 9 8 7 6 7 4 7 6 7 8 9 3 2 3 9 8 7 3 9 9 8 7 6 5 1 0 1 2 6 7 8 9 9 9 8 7 6 9 4 3 4 9 6 7 8 9 6 5 4 3 4 5 6)
                (2 3 9 8 5 4 3 5 6 7 8 9 3 4 5 8 9 9 9 8 7 6 5 1 0 1 9 5 9 7 8 9 7 6 5 4 3 2 3 6 9 8 9 6 5 6 9 8 9 6 5 4 3 4 5 8 9 5 4 3 9 8 7 6 2 1 0 9 6 5 4 3 2 3 4 5 6 7 8 9 8 9 7 5 4 3 2 3 4 5 6 9 8 7 4 3 2 3 4 5)
                (1 9 8 7 6 5 2 3 5 6 9 5 4 5 6 7 8 9 9 9 8 5 4 3 1 9 8 9 8 9 9 9 8 7 6 5 4 5 4 9 8 7 8 9 4 9 8 7 8 9 4 3 2 3 4 9 7 6 5 4 5 9 8 5 4 3 1 9 8 6 5 8 3 5 5 6 8 9 9 6 7 9 9 4 3 2 1 2 5 6 9 8 9 8 5 4 1 2 3 4)
                (0 1 9 8 6 2 1 2 3 7 8 9 9 7 7 8 9 9 9 9 9 6 5 6 9 8 7 8 7 8 9 6 9 8 7 6 5 6 9 8 7 6 5 4 3 6 5 6 7 8 9 0 1 2 5 9 8 7 6 8 9 9 8 7 6 4 2 3 9 8 8 7 4 5 6 7 9 7 6 5 6 7 8 9 4 3 2 3 4 9 8 7 8 9 2 1 0 1 2 3)
                (9 2 3 9 4 3 2 3 4 8 9 9 8 9 8 9 9 9 8 9 8 7 6 9 8 7 6 5 6 7 9 5 4 9 8 7 8 7 8 9 8 7 6 3 2 3 4 5 6 7 8 9 2 3 9 8 9 8 9 9 2 3 9 8 5 4 3 4 9 8 7 6 5 6 7 8 9 6 5 4 5 6 7 8 9 4 3 4 9 9 9 6 5 4 3 2 1 2 3 4)
                (8 9 9 8 5 4 3 4 5 9 9 8 7 8 9 9 9 8 7 8 9 8 7 9 8 7 5 4 6 7 8 9 3 2 9 8 9 8 9 9 9 8 5 4 3 4 5 6 7 8 9 4 3 9 8 7 8 9 9 4 3 9 8 7 6 5 9 5 6 9 8 9 8 7 8 9 6 5 4 3 2 9 8 9 9 9 4 9 8 9 8 7 6 5 4 3 2 3 4 5)
                (7 9 8 7 6 7 4 5 6 9 8 7 6 7 8 9 8 7 6 7 8 9 9 8 7 6 4 3 7 6 7 8 9 1 2 9 6 9 2 9 8 7 6 7 6 5 6 7 8 9 6 5 9 8 7 6 5 6 8 9 4 9 9 8 9 9 8 9 7 9 9 7 9 8 9 8 7 6 3 2 1 0 1 6 9 8 9 8 7 6 9 8 9 6 5 4 3 4 5 6)
                (6 5 9 9 7 9 5 6 7 8 9 6 5 6 9 9 9 6 5 6 7 9 8 7 6 3 2 1 4 5 8 9 4 2 9 6 5 4 3 9 9 8 7 8 7 8 9 8 9 8 7 9 8 9 8 5 4 5 8 9 9 8 9 9 9 8 7 8 9 8 9 6 5 9 1 9 8 7 4 3 2 3 4 5 6 7 8 9 6 5 6 9 8 7 6 5 4 5 7 8)
                (5 4 5 9 8 9 8 7 8 9 6 5 4 5 6 9 8 7 4 5 8 9 7 6 5 4 3 2 3 4 9 8 9 9 8 7 6 5 9 8 9 9 8 9 8 9 8 9 4 9 9 8 7 6 5 4 3 4 7 8 9 7 8 9 8 7 6 5 6 7 8 9 4 3 0 1 9 8 6 5 4 5 6 7 8 9 9 8 7 3 4 5 9 8 7 8 7 6 8 9)
                (4 3 4 5 9 7 9 8 9 6 5 4 3 4 9 8 7 6 3 4 5 9 8 9 6 5 6 5 4 5 6 7 8 9 9 8 7 9 8 7 9 8 9 9 9 8 7 6 3 2 1 9 8 9 6 5 4 5 6 9 7 6 9 8 7 6 5 4 5 6 9 6 5 2 1 2 3 9 7 6 9 6 9 8 9 6 5 4 3 2 1 2 3 9 8 9 8 7 9 3)
                (3 2 5 4 5 6 7 9 6 5 4 3 2 9 8 7 6 5 4 5 6 7 9 8 7 8 8 6 7 6 7 8 9 1 2 9 9 8 7 6 7 6 7 8 9 9 8 5 4 3 2 3 9 8 7 6 7 6 7 8 9 5 6 9 8 7 6 3 4 5 8 9 4 3 4 3 4 9 8 9 8 9 8 9 8 9 7 5 4 3 4 3 4 5 9 9 9 8 9 2)
                (0 1 2 3 9 7 9 8 7 9 5 2 1 0 9 8 9 7 5 6 7 8 9 9 8 9 9 7 8 7 8 9 1 0 1 9 8 9 6 5 6 5 6 7 8 9 9 6 7 4 5 6 7 9 8 7 8 9 8 9 3 4 9 8 9 8 5 2 5 6 7 9 9 4 5 4 5 6 9 9 7 8 7 9 7 8 9 6 5 4 5 6 5 6 7 8 9 9 9 1)
                (1 2 3 9 8 9 9 9 9 8 6 3 2 1 2 9 9 9 6 7 8 9 9 8 9 7 9 8 9 8 9 9 9 2 9 8 7 6 5 4 5 4 7 8 9 9 9 9 6 5 6 7 8 9 9 8 9 3 9 1 2 9 8 7 6 5 4 3 4 5 6 7 8 9 6 5 6 9 8 7 6 5 6 8 6 7 8 9 6 5 6 7 6 7 8 9 9 9 8 9)
                (4 3 9 8 7 8 9 8 7 6 5 4 3 2 3 4 9 8 9 8 9 9 9 7 6 6 5 9 9 9 9 9 8 9 9 9 8 7 4 3 2 3 4 5 9 8 9 8 9 6 9 9 9 8 9 9 3 2 1 0 2 3 9 8 9 6 5 4 5 7 7 8 9 8 9 8 7 8 9 6 5 4 3 4 5 8 9 8 7 8 7 8 7 8 9 9 9 8 7 8)
                (6 9 8 7 6 5 4 9 9 7 6 5 4 3 9 9 8 7 8 9 9 9 8 6 5 5 4 5 8 9 8 6 7 8 9 9 9 6 5 4 1 2 3 9 8 7 6 7 8 9 8 9 8 7 6 5 4 5 2 9 3 4 5 9 8 7 8 9 6 8 8 9 8 7 6 9 8 9 9 9 8 3 2 3 6 7 8 9 8 9 8 9 8 9 9 9 8 7 6 7)
                (9 8 7 6 5 6 3 4 9 8 9 6 9 9 8 9 7 6 9 8 9 9 8 5 4 2 3 6 7 8 9 5 6 7 8 9 8 7 6 3 2 3 4 9 7 6 5 6 7 8 7 8 9 8 9 6 7 6 9 8 9 5 9 8 9 8 9 8 7 9 9 9 7 6 5 6 9 9 9 8 7 4 3 4 5 8 9 9 9 4 9 8 9 9 9 8 9 7 5 6)
                (9 7 6 5 4 3 2 3 4 9 8 9 8 8 7 6 6 5 8 7 8 9 7 4 3 1 4 5 6 7 8 9 7 8 9 9 9 8 5 4 5 6 9 8 6 5 4 5 3 5 6 9 9 9 8 7 8 9 8 7 8 9 8 7 8 9 9 9 8 9 7 8 9 7 4 3 2 9 8 7 6 5 4 5 6 7 8 9 2 3 4 7 8 9 8 7 6 5 4 5)
                (9 8 9 7 5 6 1 2 9 8 7 6 7 4 3 5 3 4 5 6 9 7 6 5 3 2 3 4 5 6 7 8 9 9 9 8 9 9 6 7 6 9 8 7 7 4 3 1 2 4 7 8 9 9 9 8 9 8 7 6 7 8 5 6 7 8 9 9 9 7 6 7 8 9 3 2 1 0 9 8 7 6 5 6 7 8 9 2 1 2 5 6 7 8 9 8 7 6 3 4)
                (8 9 9 9 9 9 0 1 2 9 8 5 4 3 2 1 2 3 4 5 8 9 7 5 4 7 4 5 6 7 8 9 9 9 8 7 9 8 7 8 9 8 7 6 8 5 1 0 1 3 8 7 8 9 9 9 9 7 6 5 6 3 4 5 6 7 8 9 5 4 5 6 7 8 9 3 2 1 2 9 8 7 6 7 8 9 4 3 0 3 4 5 9 9 2 9 9 8 4 6)
                (7 8 9 8 8 8 9 2 9 8 7 4 3 2 1 0 1 2 5 6 7 8 9 6 5 6 7 8 9 8 9 9 9 8 7 6 7 9 8 9 9 9 9 5 4 3 2 1 5 4 5 6 9 9 9 8 9 8 7 4 3 2 3 7 5 6 7 8 9 3 4 7 8 9 5 4 5 6 3 4 9 9 7 8 9 9 5 6 7 4 5 9 8 9 3 9 8 7 6 7)
                (6 7 8 7 6 7 8 9 8 7 6 5 4 3 2 1 3 6 7 8 8 9 8 7 6 9 8 9 9 9 9 8 8 7 6 5 6 7 9 9 8 9 8 6 5 4 3 2 3 5 6 7 8 9 8 7 6 5 4 3 2 1 2 3 4 5 6 7 8 9 5 8 9 7 6 5 6 7 9 5 9 9 8 9 9 8 7 7 6 5 9 8 7 8 9 8 9 8 7 8)
                (5 6 7 4 5 6 9 8 9 8 7 6 5 4 3 2 4 5 6 7 8 9 9 8 7 8 9 8 9 9 8 7 8 6 5 4 5 6 9 8 7 9 8 7 6 5 4 3 4 6 7 8 9 7 9 8 7 8 7 4 1 0 1 2 3 6 7 9 9 8 6 7 8 9 7 8 7 9 8 9 8 9 9 2 4 9 8 9 7 9 8 7 6 7 8 7 8 9 8 9)
                (4 3 2 3 4 9 8 7 8 9 8 7 8 5 4 3 5 6 7 8 9 7 6 9 8 9 6 7 8 9 9 6 5 4 3 2 3 9 8 7 6 7 9 8 7 8 5 5 5 7 8 9 5 6 7 9 9 7 6 5 2 3 2 3 4 5 8 9 9 8 7 8 9 9 8 9 9 8 7 6 7 8 9 1 2 3 9 8 9 8 7 8 5 6 5 6 7 8 9 9)
                (3 2 1 2 3 4 7 6 7 8 9 8 9 6 9 7 6 8 9 9 7 6 5 6 9 4 5 8 7 8 9 7 6 5 2 1 9 8 8 6 5 8 7 9 8 9 6 7 6 8 9 4 4 5 6 9 8 9 5 4 3 4 5 6 7 6 7 8 9 9 8 9 3 4 9 9 8 7 6 5 6 7 8 9 3 9 8 7 9 9 6 5 4 3 4 5 6 7 8 9)
                (2 1 0 1 2 3 4 5 6 7 8 9 8 7 9 8 7 9 7 8 9 5 4 3 5 3 6 5 6 9 8 9 5 4 3 9 8 7 7 5 4 5 6 8 9 8 7 8 9 9 3 2 3 4 9 8 7 9 6 5 6 5 6 7 8 7 8 9 5 4 9 0 1 2 9 8 7 7 5 4 5 6 7 8 9 8 9 6 7 8 9 6 1 2 3 4 5 6 7 8)
                (3 2 3 2 3 4 5 6 7 8 9 7 9 8 9 9 8 9 6 7 8 9 4 2 3 2 3 4 5 6 7 9 6 5 6 9 9 6 7 4 3 4 5 6 7 9 8 9 4 3 2 1 2 9 8 9 6 8 9 8 7 6 7 8 9 8 9 5 4 3 2 1 2 9 8 7 6 5 4 3 4 5 6 9 8 7 6 5 6 7 8 9 2 3 4 5 8 9 8 9)
                (4 5 6 3 6 5 6 7 8 9 7 6 5 9 3 2 9 4 5 6 7 8 9 1 0 1 2 3 6 7 9 8 9 9 9 8 6 5 4 5 2 3 4 5 6 9 9 6 5 4 3 2 9 8 7 8 5 7 8 9 9 7 9 9 8 9 8 9 5 4 3 2 9 8 9 8 7 6 5 2 5 7 7 8 9 6 7 4 5 6 7 9 3 4 5 6 7 8 9 7)
                (5 6 7 4 7 6 7 8 9 9 8 5 4 3 2 1 2 3 4 7 8 9 5 4 3 2 3 4 5 9 8 7 9 8 9 9 7 6 3 2 1 2 3 6 7 8 9 9 6 9 4 9 8 7 6 5 4 6 9 7 8 9 9 8 7 6 7 8 9 9 9 9 8 7 8 9 9 5 4 3 4 8 9 9 8 5 4 3 4 5 6 8 9 5 6 8 8 9 7 6)
                (6 7 8 9 8 9 8 9 9 8 7 6 5 4 3 0 1 2 3 8 9 7 6 5 4 3 4 5 9 8 7 6 8 7 8 8 9 8 7 5 0 1 2 3 9 9 9 8 9 8 9 9 9 8 5 4 3 4 5 6 9 9 8 7 6 5 8 9 9 8 8 7 5 6 5 7 8 9 5 7 6 7 9 8 7 4 3 2 3 8 8 9 9 6 7 8 9 7 6 5)
                (7 8 9 5 9 1 9 9 8 7 6 5 4 3 2 1 2 3 4 9 9 8 7 6 5 4 9 9 8 7 6 5 7 6 7 7 8 9 6 4 3 2 3 9 8 9 8 7 8 7 8 9 8 7 6 3 2 3 5 6 8 9 9 8 8 9 9 9 8 7 7 6 4 5 4 6 7 8 9 8 7 9 8 7 6 3 2 1 2 7 6 9 8 9 8 9 9 8 7 6)
                (8 9 5 4 3 2 3 4 9 8 7 6 5 4 3 4 3 4 5 6 9 9 8 7 8 9 8 7 6 5 5 4 8 5 5 6 7 8 9 5 4 3 9 8 7 6 5 6 7 6 7 8 9 8 7 2 1 2 5 6 7 8 9 9 9 9 9 8 7 6 5 4 3 5 3 4 9 9 5 9 8 9 8 6 5 4 1 0 1 2 5 6 7 8 9 9 9 9 8 7)
                (9 7 6 5 4 3 4 6 7 9 8 7 6 5 9 5 4 5 6 7 8 9 9 8 9 9 8 7 6 4 3 2 1 3 4 5 8 9 9 6 5 4 5 9 8 5 4 3 4 5 6 9 8 7 4 3 2 3 4 5 6 7 8 9 9 9 8 7 6 5 4 3 2 3 2 3 8 9 4 3 9 9 9 8 6 4 2 3 2 3 4 7 8 9 9 9 8 9 9 8)
                (7 9 7 6 7 6 5 7 8 9 9 8 7 8 7 6 5 6 7 9 9 4 3 9 9 8 7 6 5 4 3 2 0 1 2 4 6 7 8 9 7 5 9 8 8 6 3 2 3 4 9 8 7 6 5 4 3 4 5 6 9 8 9 9 8 7 9 8 9 4 3 2 1 0 1 2 7 8 9 4 5 9 8 7 6 5 3 4 3 4 5 6 8 9 9 8 7 9 8 9)
                (6 9 8 9 8 7 6 8 9 4 5 9 8 9 8 7 8 7 8 9 7 3 2 3 4 9 9 7 8 7 5 2 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 4 9 9 9 8 7 6 5 4 5 6 7 9 9 9 8 7 6 7 9 8 7 6 5 2 3 4 5 6 7 8 9 6 7 9 8 7 6 4 9 8 7 6 7 9 8 7 6 5 6 7 8)
                (5 4 9 2 9 8 7 9 2 3 6 7 9 5 9 8 9 8 9 8 6 2 1 2 5 9 8 7 6 5 4 3 4 5 4 5 6 7 8 9 3 2 9 8 7 6 5 6 5 8 9 9 9 8 7 7 8 6 7 8 9 9 8 7 6 5 6 3 9 9 5 4 3 4 5 8 7 8 9 9 7 8 9 9 8 9 5 6 9 8 7 8 9 9 6 5 4 5 6 8)
                (6 3 2 1 0 9 8 9 1 2 3 9 5 4 3 9 7 9 9 6 5 4 4 3 4 5 9 8 7 6 5 4 5 6 5 6 7 8 9 3 2 1 2 9 8 7 8 7 6 7 8 9 6 9 9 8 9 8 8 9 9 8 7 6 5 4 3 2 9 7 6 5 4 5 6 7 8 9 3 9 8 9 8 7 9 9 8 7 8 9 8 9 9 8 7 4 3 4 8 9)
                (5 4 9 9 9 9 9 1 0 1 9 8 7 3 2 5 6 7 8 9 6 9 5 4 7 6 7 9 9 7 6 7 8 7 9 9 8 9 9 9 5 4 3 4 9 8 9 8 9 8 9 6 5 4 5 9 9 9 9 3 2 9 9 9 6 3 2 1 9 8 7 7 5 8 7 8 9 3 2 3 9 8 7 6 7 8 9 8 9 6 9 9 9 7 6 3 2 3 7 8)
                (6 9 8 7 8 9 3 2 4 5 8 9 6 5 3 4 5 6 7 8 9 8 9 5 6 7 8 9 9 8 7 8 9 8 9 4 9 6 9 8 9 5 6 5 6 9 1 9 3 9 8 7 6 5 9 8 9 9 8 9 1 0 9 8 9 4 9 0 1 9 8 9 6 9 8 9 9 9 1 9 8 7 6 5 4 3 2 9 4 5 9 8 7 6 5 4 1 2 6 7)
                (9 8 7 6 7 8 9 3 5 6 7 8 9 6 4 5 6 7 8 9 8 7 8 9 7 9 9 6 5 9 8 9 8 9 4 3 4 5 6 7 8 9 7 6 9 2 0 1 2 7 9 8 9 9 8 7 8 9 7 8 9 9 8 7 8 9 8 9 2 3 9 8 7 8 9 9 9 8 9 9 9 8 7 6 3 2 1 2 3 4 5 9 9 8 7 6 5 4 5 9)
                (8 7 6 5 6 7 8 9 6 9 8 9 8 7 5 6 7 8 9 2 5 6 7 8 9 5 4 3 4 5 9 8 7 6 3 2 3 4 5 6 7 8 9 7 8 9 1 2 5 6 7 9 9 8 9 6 7 8 6 7 9 8 7 6 7 6 7 9 9 4 5 9 8 9 9 9 8 7 8 9 8 9 8 5 4 3 0 1 4 5 6 7 8 9 8 7 6 5 6 7)
                (5 8 7 4 7 8 9 9 9 8 9 7 9 8 6 7 8 9 4 3 4 5 6 7 8 9 3 2 3 9 8 7 6 5 6 1 4 3 4 7 8 9 9 8 9 9 4 3 4 5 9 9 8 7 6 5 3 4 5 9 8 7 6 5 6 5 6 7 8 9 6 7 9 9 9 8 7 6 7 6 7 8 9 6 5 2 1 2 3 6 7 8 9 9 9 8 7 6 7 8)
                (4 3 4 3 4 6 7 8 9 7 7 6 7 9 9 8 9 6 5 4 5 6 7 8 9 3 2 1 4 5 9 6 5 4 3 0 1 2 5 6 7 8 9 9 9 8 7 6 5 9 8 7 9 8 8 3 2 3 9 8 9 8 5 4 3 4 5 6 7 8 9 9 9 9 8 7 6 5 4 5 8 9 6 5 4 3 4 3 4 7 9 9 9 9 8 9 8 7 8 9)
                (3 2 1 2 9 8 9 9 2 6 4 5 6 9 9 9 9 8 7 5 6 7 8 9 5 4 3 2 3 9 6 5 4 3 2 1 2 3 6 7 8 9 9 8 9 9 8 9 9 8 7 6 5 4 3 2 1 9 8 7 6 5 4 3 2 3 6 7 9 9 9 8 9 8 7 6 5 4 3 4 5 8 9 6 5 4 9 4 9 8 9 6 9 8 7 6 9 8 9 4)
                (4 3 4 3 4 9 9 2 1 2 3 4 7 8 9 4 3 9 8 8 7 8 9 8 9 6 9 3 9 8 7 6 6 5 3 2 3 4 5 6 7 8 9 7 8 9 9 8 9 9 8 7 6 9 5 4 9 9 9 6 5 4 3 2 1 2 5 6 7 8 9 7 8 9 8 5 4 3 2 3 6 7 8 9 6 9 8 9 8 9 6 5 6 9 6 5 4 9 2 3)
                (5 4 5 4 5 7 8 9 0 1 4 5 6 9 4 3 2 1 9 9 8 9 8 7 8 9 8 9 9 9 8 7 8 6 7 3 4 5 6 9 8 9 7 6 7 9 8 7 8 7 9 8 9 8 6 9 8 9 8 7 6 7 4 3 2 3 4 5 9 9 7 6 9 8 7 6 9 2 1 4 5 6 9 9 9 9 7 6 7 8 9 6 9 6 5 4 3 2 1 9)
                (6 5 6 7 6 8 9 2 1 2 5 6 7 8 9 9 3 2 4 5 9 9 9 6 7 6 7 8 9 9 9 8 9 7 8 9 5 8 7 8 9 4 4 5 9 8 7 6 5 6 5 9 9 8 7 9 7 6 9 8 7 6 5 4 3 4 5 6 7 8 9 5 6 9 8 9 8 9 0 9 6 7 8 9 8 7 6 5 6 9 8 9 8 7 6 5 4 9 9 8)
                (7 6 7 8 9 9 8 3 4 3 4 5 6 8 9 8 9 3 5 6 7 9 7 5 6 5 6 7 8 9 9 9 9 8 9 7 6 9 8 9 4 3 2 1 2 9 6 5 4 7 4 5 6 9 8 9 6 5 4 9 8 7 6 5 4 5 8 7 8 9 5 4 5 6 9 8 7 8 9 8 9 9 9 8 7 6 5 4 5 6 7 8 9 8 7 6 9 8 9 7)
                (8 7 8 9 9 9 7 6 5 4 5 9 7 9 8 7 8 9 9 7 9 8 7 4 3 4 5 6 7 8 9 8 7 9 9 8 7 8 9 6 5 4 5 0 9 8 7 4 3 4 3 4 8 9 9 8 7 6 5 6 9 8 9 6 5 6 7 8 9 0 1 2 4 9 8 7 6 9 8 7 6 8 8 9 4 3 2 3 4 5 8 9 9 9 9 9 8 7 8 6)
                (9 8 9 7 8 9 8 7 6 5 9 8 9 8 7 6 5 6 8 9 8 7 6 5 4 5 6 7 8 9 8 7 6 5 6 9 8 9 8 9 6 5 2 1 9 6 5 4 2 1 2 3 9 8 7 9 8 7 6 7 8 9 8 9 6 9 8 9 2 1 2 3 9 8 7 6 5 6 7 6 5 6 7 8 9 2 1 4 5 6 7 8 9 9 9 8 9 6 4 5)
                (9 9 5 6 7 8 9 8 7 9 8 7 6 5 4 3 4 5 6 7 9 8 7 6 5 6 7 8 9 8 9 8 5 4 3 4 9 6 7 8 9 4 3 9 8 7 6 6 3 0 3 9 8 7 6 4 9 8 7 8 9 8 7 8 9 9 9 6 3 2 3 4 5 9 8 5 4 5 4 3 4 7 8 9 8 9 9 6 7 8 9 9 7 9 8 7 8 4 3 4)
                (9 7 4 5 6 9 8 9 9 8 7 6 7 4 3 2 3 4 5 6 7 9 8 9 6 7 8 9 8 7 6 5 4 3 2 3 4 5 6 7 8 9 4 5 9 8 7 5 4 1 9 8 7 6 5 3 3 9 8 9 9 8 6 7 9 9 6 5 4 3 4 5 9 8 7 6 3 2 1 2 3 8 9 5 7 8 8 9 8 9 5 6 5 9 7 6 2 1 2 3)
                (8 6 3 4 5 6 7 8 9 9 6 5 4 3 2 1 2 3 8 7 8 9 9 9 7 8 9 8 9 8 7 6 5 4 3 4 9 9 7 8 9 6 5 6 7 9 8 6 5 2 9 9 8 7 3 2 1 0 9 9 8 7 5 9 8 8 9 6 5 4 5 6 9 9 8 5 4 3 2 3 4 9 5 4 6 7 7 8 9 5 4 3 4 9 8 4 3 2 3 4)
                (6 5 2 5 8 9 8 9 9 8 7 6 5 4 3 2 3 4 5 8 9 3 2 9 8 9 6 7 8 9 8 7 9 5 9 9 8 8 9 9 8 7 6 7 8 9 8 7 6 7 8 9 9 5 4 3 2 1 9 8 9 6 4 5 6 7 8 9 6 5 6 7 8 9 9 6 5 4 3 4 8 9 4 3 5 5 6 8 8 9 3 2 3 4 9 5 6 7 8 5)
                (5 4 3 6 7 8 9 1 2 9 8 8 7 6 4 3 4 5 8 9 3 2 1 3 9 4 5 6 7 8 9 9 8 9 8 7 6 7 8 9 9 8 7 8 9 5 9 8 7 8 9 9 9 7 7 4 3 9 8 7 6 4 3 4 5 9 9 8 7 6 7 8 9 9 8 7 6 8 7 6 7 8 9 2 3 4 5 6 7 8 9 1 2 5 9 8 7 9 9 6)
                (6 5 4 5 6 7 9 0 1 2 9 9 8 7 8 6 5 6 7 8 9 1 0 1 2 3 4 5 8 9 9 8 7 6 7 6 5 8 9 8 9 9 8 9 3 4 5 9 8 9 9 9 8 7 6 5 6 7 9 6 5 3 2 3 6 8 9 9 8 7 8 9 5 3 9 8 7 9 8 7 8 9 2 1 2 3 4 5 6 9 9 9 3 4 5 9 8 9 8 7)
                (9 8 7 6 7 8 9 1 9 9 1 2 9 9 8 7 6 9 8 9 7 2 3 5 7 8 9 6 7 8 9 9 9 5 8 5 4 5 6 7 8 9 9 3 2 5 6 7 9 9 9 9 9 8 7 6 7 9 8 7 3 2 1 2 3 4 7 8 9 8 9 4 3 2 1 9 9 9 9 8 9 2 1 0 3 4 7 9 7 8 9 8 9 5 6 7 9 2 9 8)
                (3 9 8 7 8 9 9 9 8 8 9 9 7 5 9 8 7 8 9 7 6 5 4 5 6 7 8 9 8 9 9 9 8 4 3 2 3 4 5 6 7 8 9 2 1 2 3 8 9 9 8 9 8 9 8 9 8 9 9 3 2 1 0 1 2 3 6 7 8 9 9 9 2 1 0 3 4 9 8 9 4 3 2 1 2 5 6 7 9 9 8 7 8 9 7 9 2 1 4 9)
                (2 1 9 8 9 7 9 8 7 6 7 8 9 4 5 9 8 9 9 8 9 6 9 8 7 9 9 9 9 3 9 8 7 6 4 3 4 5 9 8 9 9 4 3 2 3 4 5 9 8 7 8 7 9 9 9 9 9 8 7 6 5 1 2 3 4 5 6 9 9 9 8 3 2 1 2 9 8 7 6 5 4 3 2 3 4 5 6 7 8 9 6 7 8 9 8 9 2 3 4)
                (3 2 3 9 5 6 7 9 6 5 6 7 9 3 4 5 9 9 9 9 8 9 8 9 8 9 9 8 9 2 9 9 8 7 5 4 5 9 8 9 9 8 7 6 5 4 5 9 8 7 6 5 6 3 4 7 8 9 9 6 5 4 2 3 4 5 7 9 9 9 8 7 4 3 2 3 4 9 8 7 6 7 6 5 4 5 6 7 8 9 8 5 6 7 8 7 8 9 4 5)
                (4 9 9 9 4 5 9 8 5 4 5 6 7 9 5 6 7 8 9 8 7 8 7 8 9 9 8 7 8 9 8 7 9 7 6 5 9 8 7 6 9 9 8 7 6 5 9 6 5 8 3 4 3 2 3 6 7 9 8 7 6 5 6 7 5 6 8 9 9 8 7 6 5 4 5 4 9 9 9 8 7 8 7 6 5 6 7 8 9 9 7 4 3 4 5 6 9 8 9 6)
                (9 8 7 8 3 9 8 7 6 5 6 9 9 8 9 7 8 9 8 7 6 5 6 7 9 9 7 6 5 4 5 6 9 8 9 9 8 9 6 5 7 8 9 8 9 9 8 9 4 3 2 1 0 1 4 5 6 7 9 8 7 6 9 8 9 8 9 5 4 9 8 7 8 9 6 9 8 9 1 9 8 9 8 8 9 7 8 9 9 8 6 5 4 5 7 8 9 7 8 9)
                (9 7 6 5 1 2 9 8 7 6 9 8 6 7 8 9 9 8 9 8 7 4 7 9 8 7 6 5 4 3 4 5 6 9 9 8 7 6 5 4 8 9 1 9 9 8 7 8 9 5 4 3 2 2 3 4 7 8 9 9 8 7 8 9 7 9 4 3 2 3 9 8 9 9 9 8 7 1 0 1 9 5 9 9 9 8 9 7 9 8 7 6 9 6 8 9 7 6 7 8)
                (8 6 5 4 2 3 4 9 8 9 8 7 5 6 7 9 8 7 6 7 4 3 4 5 9 9 8 3 1 2 5 6 8 9 9 9 8 7 8 5 9 9 2 9 8 9 6 7 8 9 6 5 3 5 4 5 6 7 8 9 9 8 9 5 6 9 9 4 5 6 7 9 9 9 8 7 6 2 3 2 3 4 5 9 9 9 7 6 7 9 8 7 8 9 9 7 7 5 6 7)
                (9 7 6 6 5 4 5 6 9 8 7 6 4 5 6 8 9 9 5 4 3 2 3 6 9 8 9 4 0 1 2 3 7 8 9 9 9 8 7 6 7 8 9 8 7 8 5 6 7 8 9 6 7 6 5 6 7 8 9 3 2 9 2 3 9 8 8 9 9 8 8 9 9 8 7 6 5 4 4 3 9 5 9 8 9 8 9 7 8 9 9 8 9 8 7 6 5 4 5 6)
                (9 8 7 8 6 5 6 7 9 9 8 5 3 6 5 6 7 8 9 3 2 1 2 9 8 7 6 5 6 2 3 5 6 7 8 9 4 9 8 7 8 9 8 7 6 5 4 5 6 9 8 9 8 9 6 7 8 9 6 7 1 0 1 9 9 7 7 7 8 9 9 2 1 9 8 7 8 9 5 9 8 9 8 7 8 7 8 9 9 7 8 9 8 7 6 3 2 3 4 5)
                (9 9 8 9 8 6 7 9 8 7 9 4 2 3 4 5 6 9 3 2 1 0 1 2 9 8 9 8 7 9 4 6 7 8 9 2 3 4 9 8 9 4 9 9 8 7 3 4 5 6 7 8 9 8 7 8 9 6 5 3 2 1 9 8 8 6 6 6 7 8 9 3 0 2 9 8 9 9 9 8 7 6 7 6 5 6 7 8 9 5 4 5 9 6 5 4 3 4 5 6)
                (9 8 9 6 9 7 9 8 7 6 5 4 3 4 5 6 7 8 9 5 2 1 3 4 5 9 9 9 8 9 8 7 8 9 2 1 3 9 9 9 2 3 9 8 7 6 2 3 9 7 8 9 4 9 8 9 8 6 5 4 5 9 8 7 7 5 5 5 6 7 8 9 1 9 7 9 9 9 8 7 6 5 8 7 4 5 6 7 8 9 3 9 8 7 6 5 6 5 6 7)
                (8 7 5 5 6 9 9 9 8 7 6 5 4 5 6 7 8 9 7 4 3 2 5 6 7 8 9 9 9 8 9 8 9 2 1 0 9 8 7 8 9 9 8 7 6 5 4 5 8 9 9 1 3 4 9 9 9 7 6 7 9 8 7 6 6 4 3 4 5 6 7 8 9 7 6 7 9 8 7 6 5 4 3 2 3 4 5 6 9 1 2 9 9 8 7 6 7 7 7 8)
                (5 4 4 4 5 9 8 7 9 8 7 6 7 6 7 8 9 9 6 5 4 3 4 5 6 7 8 9 8 7 6 9 8 9 2 9 8 7 6 7 8 7 9 9 8 6 7 6 7 8 9 0 1 4 5 9 8 9 9 9 8 9 6 5 4 3 2 3 8 7 8 9 3 4 5 8 9 9 8 7 6 5 5 3 4 5 6 7 8 9 9 8 8 9 8 9 8 9 8 9)
                (9 3 2 3 4 9 7 6 7 9 9 8 9 7 8 9 9 8 7 8 9 4 5 6 8 9 9 8 7 6 5 6 7 8 9 8 7 6 5 6 7 6 7 8 9 7 8 7 8 9 2 1 2 3 9 8 7 6 8 9 7 8 9 6 5 2 1 2 9 8 9 3 2 3 4 7 8 9 9 8 7 6 7 6 5 6 7 8 9 6 5 6 7 8 9 9 9 4 9 6)
                (8 9 3 9 9 8 6 5 4 5 6 9 8 9 9 3 4 9 8 9 8 9 9 7 9 3 4 9 6 5 4 3 4 9 8 7 6 5 4 5 8 5 6 9 9 8 9 8 9 4 3 2 3 9 8 9 6 5 9 8 6 7 8 9 4 3 0 9 8 9 5 4 9 4 5 6 9 1 0 9 9 7 8 7 6 8 8 9 9 5 4 5 6 7 8 9 4 3 2 5)
                (7 8 9 8 9 6 5 4 3 4 5 7 7 8 9 2 1 0 9 8 7 9 8 9 3 2 9 8 7 4 3 2 1 2 9 6 5 4 3 2 1 4 7 8 9 9 9 9 6 5 4 5 9 8 7 6 5 4 8 7 5 6 7 8 9 4 9 8 7 8 9 9 8 9 6 7 8 9 1 2 9 8 9 8 9 9 9 7 8 9 2 3 4 9 9 9 3 2 1 4)
                (6 5 8 7 8 9 4 3 2 3 4 5 6 9 4 3 9 9 8 7 6 5 7 8 9 3 4 9 8 9 2 1 0 9 8 7 6 5 4 3 2 3 6 7 8 9 9 8 7 6 5 9 8 7 6 5 4 3 5 3 4 5 6 7 8 9 8 7 6 7 8 9 7 8 9 8 9 3 2 9 9 9 2 9 2 3 5 6 7 9 3 4 9 8 9 8 9 3 2 3)
                (5 4 5 6 7 8 9 4 3 4 5 6 7 8 9 9 8 9 9 8 5 4 5 7 8 9 9 8 7 6 5 4 1 2 9 8 7 6 5 6 7 4 5 8 9 3 2 9 9 7 6 7 9 8 5 4 5 2 1 2 3 6 7 9 9 8 7 6 5 6 7 8 6 7 8 9 9 9 9 8 9 9 1 0 1 2 3 6 7 8 9 9 8 7 8 7 9 4 3 4)
                (4 3 4 5 6 7 8 9 4 6 6 7 8 9 9 8 7 8 9 9 4 3 4 6 9 5 4 9 8 9 4 3 2 9 8 9 8 7 6 7 8 5 6 7 9 4 9 9 9 8 7 9 8 7 6 3 2 1 0 1 4 9 8 9 6 9 9 5 4 2 3 4 5 9 9 9 9 8 7 6 7 8 9 1 2 3 4 5 6 9 9 9 9 6 7 6 8 9 6 5)
                (3 2 3 5 7 8 9 9 8 7 8 8 9 9 9 7 6 7 8 9 1 2 5 6 8 9 3 2 9 8 5 4 9 8 7 6 9 8 7 8 9 6 7 9 8 9 8 9 9 9 8 9 9 6 5 4 3 2 1 2 7 8 9 4 5 9 8 4 3 1 2 5 9 8 9 9 9 7 6 5 6 7 8 9 3 4 5 6 7 8 9 8 6 5 6 5 7 8 9 6)
                (2 1 2 4 8 9 9 9 9 8 9 9 9 8 7 6 5 8 9 8 9 3 4 6 7 8 9 9 8 7 6 9 8 7 6 5 4 9 8 9 8 7 9 8 7 6 7 8 9 9 9 9 8 7 6 5 4 3 2 3 6 8 9 3 9 8 7 6 4 0 1 9 8 7 8 8 8 9 3 4 7 8 9 9 9 5 6 7 9 9 8 7 5 4 3 4 6 7 8 9)
                (4 2 3 5 9 9 8 9 8 9 9 9 8 7 6 5 4 9 8 7 9 4 8 7 8 9 4 5 9 8 7 8 9 6 5 4 3 2 9 6 9 9 9 7 6 5 6 7 8 9 9 8 9 8 7 6 6 4 3 4 5 9 9 2 9 8 7 6 5 1 9 8 7 6 7 7 7 8 9 5 6 7 8 9 8 9 7 9 8 9 9 8 9 3 2 3 5 6 7 8)
                (5 3 4 5 9 8 7 8 7 8 9 9 9 6 5 4 3 4 6 6 8 9 9 8 9 2 3 4 5 9 8 9 8 7 6 5 4 3 4 5 9 8 9 6 5 4 5 6 7 8 9 7 8 9 8 7 8 5 4 5 6 7 8 9 2 9 8 7 6 9 8 7 6 5 4 5 6 7 8 9 7 8 9 5 7 8 9 8 7 8 9 7 6 2 1 2 4 5 6 8)
                (5 4 5 9 8 7 6 5 6 7 8 9 8 9 5 3 2 3 4 5 7 9 8 9 0 1 2 3 4 9 9 9 9 8 7 8 5 4 5 9 8 7 6 5 4 3 6 7 8 9 6 5 4 3 9 9 7 6 5 6 7 8 9 2 1 2 9 8 9 8 9 8 7 6 3 4 3 8 9 8 9 9 5 4 5 9 8 7 6 8 9 6 5 4 3 3 5 6 7 9)
                (6 7 9 8 7 6 5 4 5 6 5 8 7 8 9 2 1 4 5 6 5 6 7 8 9 2 9 4 9 8 9 8 9 9 8 9 6 5 6 7 9 8 5 4 3 2 3 4 9 8 7 6 5 2 1 9 8 9 8 7 8 9 2 1 0 1 9 9 8 7 8 9 6 5 2 1 2 5 6 7 8 9 4 3 4 5 9 6 5 7 8 9 6 5 4 4 5 7 9 9)
                (7 9 9 9 8 7 4 3 4 3 4 5 6 9 2 1 0 1 2 3 4 5 9 9 9 9 8 9 8 7 6 7 8 9 9 8 7 6 7 9 8 7 6 5 4 5 6 7 8 9 6 5 4 3 9 9 9 7 9 8 9 5 3 2 1 9 8 7 5 6 9 6 5 4 3 2 3 4 5 6 9 4 3 2 3 9 8 7 4 5 9 8 7 8 5 5 6 7 8 9)
                (9 8 9 9 9 8 3 2 1 2 4 5 7 8 9 2 1 2 3 4 5 6 7 8 9 8 7 6 7 6 5 6 9 5 4 9 8 7 8 9 9 8 7 6 5 8 7 8 9 9 9 7 6 9 8 9 7 6 5 9 6 5 4 5 3 4 9 8 6 7 8 9 6 5 4 5 6 9 6 7 8 9 1 0 9 8 7 6 3 6 7 9 8 9 7 6 9 8 9 9)
                (9 7 8 9 8 7 4 3 4 3 4 6 8 9 4 3 2 3 4 5 6 7 8 9 9 9 8 5 6 3 4 7 8 9 2 1 9 8 9 8 9 9 8 9 6 9 8 9 9 9 8 9 9 8 7 8 9 7 6 9 7 6 5 5 4 5 9 8 7 8 9 8 7 8 5 6 7 8 9 8 9 5 4 1 4 9 9 5 4 9 9 9 9 9 8 7 8 9 9 8)
                (8 6 7 6 9 6 5 6 5 6 5 7 8 9 9 8 7 4 5 6 7 8 9 9 9 8 9 4 3 2 3 4 7 8 9 0 1 9 8 7 8 9 9 8 7 8 9 9 9 8 7 9 8 7 6 7 8 9 7 9 8 7 9 8 7 6 7 9 8 9 4 9 8 9 7 9 8 9 9 9 5 4 3 2 3 9 8 6 9 8 9 8 9 9 9 8 9 9 8 7)
                (6 5 6 5 6 9 8 7 6 7 8 8 9 1 0 9 6 5 6 7 8 9 6 9 8 7 6 5 4 3 4 5 6 7 8 9 9 8 7 6 7 8 9 9 8 9 8 9 8 7 6 5 7 6 5 6 7 8 9 9 9 8 9 9 8 7 8 9 9 5 3 4 9 9 8 9 9 9 8 7 6 5 4 5 6 8 9 9 8 7 6 7 8 9 8 9 9 8 8 6)
                (5 4 5 4 5 6 9 8 7 8 9 9 9 9 9 8 7 6 7 8 9 5 5 4 9 8 9 8 7 4 5 6 7 9 9 7 8 9 8 7 8 9 7 6 9 6 7 8 9 6 5 4 3 4 4 5 6 7 8 9 9 9 4 5 9 8 9 9 6 5 2 1 0 9 9 5 4 3 9 8 7 6 7 8 7 8 9 8 9 6 5 6 7 8 7 8 9 7 6 5)
                (4 3 2 3 4 5 6 9 8 9 7 6 9 8 9 9 8 7 8 9 3 4 1 3 5 9 8 7 6 5 6 7 8 9 5 6 7 8 9 8 9 7 6 5 4 5 6 9 8 7 4 3 2 1 3 4 5 6 7 8 9 4 3 4 5 9 7 8 9 4 3 2 9 8 7 4 3 2 1 9 8 7 8 9 8 9 8 7 6 5 4 5 6 5 6 7 8 9 5 4)
                (5 4 3 4 5 6 7 8 9 3 6 5 6 7 8 9 9 8 9 3 2 1 0 1 4 5 9 8 9 6 7 9 9 3 4 5 6 7 9 9 8 9 5 4 3 4 9 9 7 6 5 4 3 0 2 3 4 5 6 7 8 9 2 3 4 5 6 7 8 9 4 5 9 7 6 5 2 1 0 2 9 8 9 5 9 9 9 6 5 4 3 5 3 4 5 6 7 8 9 3)
                (6 5 4 7 9 7 8 9 3 2 3 4 5 6 7 8 9 9 5 4 3 2 3 2 3 4 5 9 9 7 8 9 4 2 3 6 7 8 9 8 7 5 4 3 2 9 8 7 6 5 4 3 2 1 2 4 5 6 7 8 9 0 1 4 5 6 7 8 9 6 5 9 8 6 5 4 3 5 4 3 4 9 5 4 3 9 8 5 4 3 2 1 2 3 4 8 9 9 3 2)
                (7 6 5 6 8 8 9 3 2 1 2 5 6 7 8 9 8 7 6 5 4 3 4 3 4 5 6 7 8 9 9 4 3 1 2 3 4 7 8 9 8 4 3 2 1 2 9 8 7 6 5 5 4 3 3 4 6 9 8 9 4 3 2 3 4 7 8 9 8 7 6 9 8 7 6 5 5 6 5 4 5 8 9 3 2 9 7 6 5 4 3 2 3 4 5 6 7 8 9 1)
                (8 7 9 8 9 9 5 4 3 2 3 6 7 8 9 9 9 8 9 6 5 6 6 5 7 6 7 8 9 7 6 5 3 2 3 4 5 6 7 8 9 3 2 1 0 1 2 9 8 7 6 6 5 4 5 6 7 8 9 6 5 4 3 5 6 8 9 9 9 8 7 9 9 8 7 6 6 7 6 5 6 7 8 9 1 0 9 8 7 6 4 5 4 6 6 7 8 9 1 0))))

    (-sum (--filter it (-flatten (cl-loop for y from 0 to 99
                                          collect (cl-loop for x from 0 to 99
                                                           collect (if (--every? it (-map (lambda (neighbor) (< (my-nth-2d x y grid)
                                                                                                           neighbor))
                                                                                          (get-neighbors x y grid)))
                                                                       (1+ (my-nth-2d x y grid))
                                                                     nil)))))))
#+end_src

#+RESULTS:
: 425


* 9.2
#+begin_src emacs-lisp
  (defmacro my-nth-2d (r c grid)
    "return a reference to cell [r c] in a grid. can be used with setf"
    `(nth ,c (nth ,r ,grid)))


  (defun my-get-grid-neighbors (r c grid)
    (--filter it (-flatten (cl-loop for rr in (list (1- r) r (1+ r)) collect
                                    (cl-loop for cc in (list (1- c) c (1+ c)) collect
                                             (if (and (>= cc 0)
                                                      (>= rr 0)
                                                      (< rr (length grid))
                                                      (< cc (length (nth 0 grid))))
                                                 (my-nth-2d rr cc grid)
                                               nil))))))


  (defun my-get-grid-neighbors (r c grid)
    (--filter it (-flatten (list (if (> r 0)
                                     (my-nth-2d (1- r) c grid)
                                   nil)
                                 (if (< (1+ r) (length grid))
                                     (my-nth-2d (1+ r) c grid)
                                   nil)
                                 (if (> c 0)
                                     (my-nth-2d r (1- c) grid)
                                   nil)
                                 (if (< (1+ c) (length (nth 0 grid)))
                                     (my-nth-2d r (1+ c) grid)
                                   nil)))))


  (defun get-grid-coordinates (grid)
    (-map ))


  (defun my-which-basin (r c grid)
    "return the basin to which the cell at [r c] should be connected (if any), otherwise return nil."
    ;; if the cell borders a numbered cell on any side then it should be part of that same basin
    (let ((neighbors (my-get-grid-neighbors r c grid)))
      (cl-find-if #'numberp neighbors))) ;; return the first found number value in the neighbors (e.g. the basin it should belong to. nil otherwise


  (let* ((grid '((2 1 9 9 9 4 3 2 1 0)
                 (3 9 8 7 8 9 4 9 2 1)
                 (9 8 5 6 7 8 9 8 9 2)
                 (8 7 6 7 8 9 6 7 8 9)
                 (9 8 9 9 9 6 5 6 7 8)))
         ;; make an emptory grid of nil's, except for places where there was a 9.
         ;; these are substituted with "w" (for wall)
         (grid2 (cl-loop for r below (length grid)
                         collect (cl-loop for c below (length (nth r grid))
                                          collect (if (equal (my-nth-2d r c grid) 9)
                                                      "w"
                                                    nil))))
         (current-basin 0)
         (seen '()))


    (cl-loop for r below (length grid2) do
             (cl-loop for c below (length (nth r grid2)) do
                      (when (and (not (member (cons r c) seen))
                                 (not (equal (my-nth-2d r c grid2) "w")))
                        (let ((size 0)
                              (que '()))
                          (add-to-list que (cons r c))
                          (while que
                            (let ((cords (pop que)))
                              (unless (member cords seen)
                                (add-to-list seen cords)
                                (setq size (1+ size))
                                )))))))

    grid2)

#+end_src

#+RESULTS:
| 42 | 42 |  w |  w |  w | 42 | 42 | 42 | 42 | 42 |
| 42 |  w | 42 | 42 | 42 |  w | 42 |  w | 42 | 42 |
|  w | 42 | 42 | 42 | 42 | 42 |  w | 42 |  w | 42 |
| 42 | 42 | 42 | 42 | 42 |  w | 42 | 42 | 42 |  w |
|  w | 42 |  w |  w |  w | 42 | 42 | 42 | 42 | 42 |






S = []
SEEN = set()
for r in range(R):
    for c in range(C):
        if (r,c) not in SEEN and G[r][c]!=9:
            size = 0
            Q = deque()
            Q.append((r,c))
            while Q:
                (r,c) = Q.popleft()
                if (r,c) in SEEN:
                    continue
                SEEN.add((r,c))
                size += 1
                for d in range(4):
                    rr = r+DR[d]
                    cc = c+DC[d]
                    if 0<=rr<R and 0<=cc<C and G[rr][cc]!=9:
                        Q.append((rr,cc))
            S.append(size)
S.sort()
print(S[-1]*S[-2]*S[-3])
