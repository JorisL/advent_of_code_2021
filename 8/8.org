* 8.1

One-lines which:
- uses =sed= to extract the output part of the puzzle input (after the seperator)
- uses =sed= to put each item on a single line instead of 4 per line
- uses =egrep= to extract the lines with a specific number of characters
- uses =wc= to count the number of lines after filtering
#+begin_src shell
  cat input.txt | sed 's/.*| //g; s/ /\n/g' | egrep '^(.{2}|.{3}|.{4}|.{7})$' | wc -l
#+End_Src

#+RESULTS:
: 321


* 8.2

Import helper libraries to make elisp development a bit easier
#+begin_src emacs-lisp
  (require 's)
  (require 'f)
  (require 'seq)
  (require 'dash)
  (require 'cl-lib)
#+end_src

#+RESULTS:
: cl-lib


#+begin_src emacs-lisp
  (let ((permutation-table (-map (lambda (l) (-zip '("a" "b" "c" "d" "e" "f" "g") l))(-permutations '("a" "b" "c" "d" "e" "f" "g")))))
    (s-replace-all (nth 42 permutation-table) "abcdefg"))
#+end_src

#+RESULTS:
: abdgcef


#+begin_src emacs-lisp
  (defun my-sort-words-1 (s)
    (s-join " " (-sort #'string< (-map (lambda (x) (apply #'concat (-sort #'string< (s-split "" x)))) (s-split " " s)))))

  (defun my-sort-words-2 (s)
    (s-join " " (-map (lambda (x) (apply #'concat (-sort #'string< (s-split "" x)))) (s-split " " s))))

  (my-sort-words-1 "abcefg cf acdeg acdfg bcdf abdfg abdefg acf abcdefg abcdfg") ;default format for 7-segment display
#+end_src

#+RESULTS:
: abcdefg abcdfg abcefg abdefg abdfg acdeg acdfg acf bcdf cf


#+begin_src emacs-lisp
  (apply #'concat (-sort #'string< (s-split "" "ditiseentest")))
#+end_src

#+RESULTS:
: deeeiinssttt


Test on example string
#+begin_src emacs-lisp
  (let ((permutation-table (-map (lambda (l) (-zip '("a" "b" "c" "d" "e" "f" "g") l))(-permutations '("a" "b" "c" "d" "e" "f" "g"))))
        (inputs '("be cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb"
                  "edbfga begcd cbg gc gcadebf fbgde acbgfd abcde gfcbed gfec"))
        (outputs '("fdgacbe cefdb cefbgd gcbe"
                   "fcgedb cgb dgebacf gc")))
    (cl-loop for input in inputs
             for output in outputs
             collect (cl-loop for p in permutation-table
                              if (string= (my-sort-words-1 (s-replace-all p input))
                                          "abcdefg abcdfg abcefg abdefg abdfg acdeg acdfg acf bcdf cf")
                              return (s-replace-all '(("abcefg" . "0")
                                                      ("cf" . "1")
                                                      ("acdeg" . "2")
                                                      ("acdfg" . "3")
                                                      ("bcdf" . "4")
                                                      ("abdfg" . "5")
                                                      ("abdefg" . "6")
                                                      ("acf" . "7")
                                                      ("abcdefg" . "8")
                                                      ("abcdfg" . "9"))
                                                    (my-sort-words-2 (s-replace-all p output)))
                              finally return nil))
    )
#+end_src

#+RESULTS:
| 8 3 9 4 | 9 7 8 1 |



Actual question

#+begin_src shell
  cat input.txt | sed 's/ |.*$//g' > inputs.txt
#+end_src

#+RESULTS:

#+begin_src shell
  cat input.txt | sed 's/^.*| //g' > outputs.txt
#+end_src

#+RESULTS:


Rough explenation of solving method:
- generate all the permutations of a-g, which represent the way in which the segment wires are switched around
  each list element is represents one of the possible permutations.
  Each of these permutations is an association list with as key the original value (a-g in alphabetical order) and as value the new permutation.
- For each possible permutation:
  - Replace all letters in the input string using the permutation association list.
    Then check if this matches a "real" 7-segment display.
    The comparison is done with a string where all characters in each segment are sorted alphabetically, and all the words in the string are sorted alphabetically.
    This sorting causes each permutation to have a single string representation, which we can directly compare to the string for a "real" 7-segment display.
  - If this permutation matches the real 7-segment display string (e.g. we know how the wires are switched around for this line),
    apply the permutation list on the output string.
    This returns which 4 numbers are displayed using the wiring from a "real" 7-segment display.
    We can now directly replace these a-g words with the number they represent.
    We do need to make sure that the characters for each individual segment are sorted alphabetically in order to replace it with numbers,
    but here we don't sort all the segments, since we need to preserve or the 4 numbers.
  
#+begin_src emacs-lisp
  (let ((permutation-table (-map (lambda (l) (-zip '("a" "b" "c" "d" "e" "f" "g") l))(-permutations '("a" "b" "c" "d" "e" "f" "g"))))
        (inputs (s-split "\n" (f-read-text "inputs.txt") t))
        (outputs (s-split "\n" (f-read-text "outputs.txt") t)))
    (cl-loop for input in inputs
             for output in outputs
             collect (cl-loop for p in permutation-table
                              if (string= (my-sort-words-1 (s-replace-all p input))
                                          "abcdefg abcdfg abcefg abdefg abdfg acdeg acdfg acf bcdf cf")
                              return (s-replace-all '(("abcefg" . "0")
                                                      ("cf" . "1")
                                                      ("acdeg" . "2")
                                                      ("acdfg" . "3")
                                                      ("bcdf" . "4")
                                                      ("abdfg" . "5")
                                                      ("abdefg" . "6")
                                                      ("acf" . "7")
                                                      ("abcdefg" . "8")
                                                      ("abcdfg" . "9"))
                                                    (my-sort-words-2 (s-replace-all p output)))
                              finally return nil))
    )
#+end_src

#+RESULTS:
| 4 9 4 9 | 7 1 4 7 | 1 2 7 5 | 2 3 8 7 | 9 0 3 5 | 2 0 3 3 | 6 4 3 1 | 3 4 3 6 | 0 6 4 2 | 2 5 7 0 | 2 3 4 9 | 0 5 0 2 | 8 8 2 6 | 6 5 3 7 | 8 4 8 7 | 0 4 3 5 | 7 8 4 1 | 2 2 3 5 | 2 9 0 4 | 1 5 1 5 | 6 9 4 9 | 1 3 8 5 | 2 5 5 0 | 0 2 8 0 | 3 8 2 8 | 8 9 2 9 | 8 0 7 5 | 6 5 1 5 | 0 5 0 3 | 7 0 4 2 | 8 7 2 0 | 7 5 0 8 | 7 8 7 8 | 5 8 8 6 | 5 7 3 9 | 8 2 9 5 | 7 0 7 0 | 2 9 7 9 | 3 2 2 5 | 3 8 8 8 | 0 7 8 9 | 2 4 4 0 | 9 1 3 4 | 1 9 4 4 | 9 9 0 7 | 4 3 4 6 | 4 0 4 2 | 2 0 7 1 | 4 8 3 3 | 5 6 4 1 | 2 9 2 0 | 6 5 7 8 | 9 0 6 8 | 0 1 0 1 | 9 3 7 7 | 9 2 6 9 | 3 1 2 0 | 6 5 1 8 | 8 0 4 6 | 3 3 5 5 | 3 2 3 3 | 4 7 6 5 | 3 3 7 4 | 5 9 5 1 | 6 1 9 9 | 8 4 4 7 | 5 5 7 8 | 8 6 6 2 | 3 7 5 9 | 7 7 9 0 | 5 1 7 3 | 7 5 7 9 | 1 7 5 2 | 5 4 8 7 | 8 2 0 2 | 8 0 3 4 | 7 9 5 2 | 9 2 4 8 | 9 7 8 7 | 9 8 4 4 | 6 4 3 7 | 0 0 6 0 | 2 9 7 1 | 1 7 5 3 | 5 5 5 9 | 4 3 3 7 | 9 7 0 2 | 9 6 7 7 | 9 0 7 4 | 5 7 6 9 | 1 5 8 3 | 8 5 8 6 | 7 5 3 3 | 1 3 6 1 | 7 8 4 0 | 9 5 1 9 | 5 2 3 4 | 5 6 0 6 | 2 7 1 3 | 0 4 1 8 | 7 4 4 9 | 2 2 6 5 | 5 0 3 1 | 2 5 7 0 | 3 5 8 2 | 9 8 8 2 | 6 8 5 1 | 8 4 5 3 | 6 1 1 2 | 8 2 6 4 | 0 6 6 1 | 3 8 1 0 | 4 5 6 8 | 2 3 2 0 | 7 4 4 7 | 6 6 2 5 | 7 4 2 5 | 9 5 1 1 | 8 1 2 7 | 8 7 1 5 | 0 2 7 3 | 5 3 6 3 | 5 6 8 1 | 9 1 6 1 | 2 0 4 4 | 0 3 4 9 | 8 6 4 1 | 2 8 1 8 | 5 1 5 4 | 3 3 1 2 | 1 8 9 7 | 4 4 9 8 | 1 3 6 5 | 3 5 6 8 | 6 2 4 7 | 0 9 9 9 | 7 9 8 0 | 4 4 3 1 | 7 6 8 7 | 3 8 5 9 | 8 8 3 4 | 9 4 8 0 | 1 7 5 5 | 8 3 1 4 | 3 0 3 5 | 3 0 9 2 | 2 9 5 0 | 1 1 2 7 | 6 4 3 4 | 9 1 4 7 | 4 2 7 2 | 6 5 0 9 | 0 9 1 5 | 8 4 9 5 | 1 1 0 8 | 0 3 4 4 | 0 2 7 6 | 5 7 3 0 | 2 1 0 2 | 7 4 9 5 | 2 2 7 6 | 0 6 2 4 | 6 1 8 5 | 0 9 6 6 | 3 8 5 3 | 2 9 5 3 | 5 0 6 4 | 4 5 8 6 | 1 3 2 7 | 6 3 9 3 | 0 0 2 2 | 8 2 4 7 | 9 7 4 4 | 8 5 2 2 | 2 4 1 2 | 5 7 8 6 | 7 5 8 3 | 5 0 0 9 | 1 5 1 1 | 2 4 6 7 | 9 0 2 0 | 5 2 5 3 | 2 3 9 2 | 9 9 3 0 | 3 0 5 6 | 9 3 1 4 | 1 1 4 5 | 7 3 8 3 | 1 0 1 8 | 4 5 4 0 | 5 1 2 2 | 9 8 7 9 | 8 4 7 8 | 6 0 6 3 | 6 6 3 6 | 7 5 5 0 | 6 0 7 7 | 0 5 7 7 | 7 7 0 4 | 7 0 2 3 |


Here we do the same, but now we turn the 4 numbers from each line into a number, and all numbers for the final awnser.
#+begin_src emacs-lisp
  (let ((permutation-table (-map (lambda (l) (-zip '("a" "b" "c" "d" "e" "f" "g") l))(-permutations '("a" "b" "c" "d" "e" "f" "g"))))
        (inputs (s-split "\n" (f-read-text "inputs.txt") t))
        (outputs (s-split "\n" (f-read-text "outputs.txt") t)))

    (let ((results (cl-loop for input in inputs
                            for output in outputs
                            collect (cl-loop for p in permutation-table
                                             if (string= (my-sort-words-1 (s-replace-all p input))
                                                         "abcdefg abcdfg abcefg abdefg abdfg acdeg acdfg acf bcdf cf")
                                             return (s-replace-all '(("abcefg" . "0")
                                                                     ("cf" . "1")
                                                                     ("acdeg" . "2")
                                                                     ("acdfg" . "3")
                                                                     ("bcdf" . "4")
                                                                     ("abdfg" . "5")
                                                                     ("abdefg" . "6")
                                                                     ("acf" . "7")
                                                                     ("abcdefg" . "8")
                                                                     ("abcdfg" . "9"))
                                                                   (my-sort-words-2 (s-replace-all p output)))
                                             finally return nil))))
      (-sum (-map #'string-to-number (-map (lambda (x) (s-replace " " "" x))
                                           results)))))
#+end_src

#+RESULTS:
: 1028926

